# -*- coding: utf-8 -*-
"""Audio_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tAwR3kmA3sX7BzQxZI-yGvKtiKXJHdWH
"""

import matplotlib.pyplot as plt
from matplotlib.pyplot import specgram
import librosa
import librosa.display
import os
import scipy.io.wavfile
import numpy as np
import sys
import pandas as pd
import glob
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
import keras
from keras.models import Sequential, Model
from keras.layers import Dense, Embedding, Conv1D, MaxPooling1D, AveragePooling1D, BatchNormalization, Input, Flatten, Dropout, Activation
from keras.utils import to_categorical, np_utils

data, sampling_rate = librosa.load('/content/drive/My Drive/Audio_Analysis/03-01-01-01-01-01-01.wav')

print (data)

print (sampling_rate)

librosa.display.waveplot(data, sr=sampling_rate)

X = librosa.stft(data)
Xdb = librosa.amplitude_to_db(abs(X))
plt.figure(figsize=(14, 5))
librosa.display.specshow(Xdb, sr=sampling_rate, x_axis='time', y_axis='hz')
plt.colorbar()

mylist = []
for path, subdirs, files in os.walk('/content/drive/My Drive/Audio_Speech_Actors_01-24'):
    for name in files:
        mylist.append(os.path.join(path, name))

print(mylist[1:1441])
mylist=mylist[1:1441]

print(files)
print(path)

print(name)

class FetchLabel():

    def get_emotion(self, file_path):
        item = file_path.split('/')[-1]
        if item[6:-16]=='02' and int(item[18:-4])%2==0:
            return 'female_calm'
        elif item[6:-16]=='02' and int(item[18:-4])%2==1:
            return 'male_calm'
        elif item[6:-16]=='03' and int(item[18:-4])%2==0:
            return 'female_happy'
        elif item[6:-16]=='03' and int(item[18:-4])%2==1:
            return 'male_happy'
        elif item[6:-16]=='04' and int(item[18:-4])%2==0:
            return 'female_sad'
        elif item[6:-16]=='04' and int(item[18:-4])%2==1:
            return 'male_sad'
        elif item[6:-16]=='05' and int(item[18:-4])%2==0:
            return 'female_angry'
        elif item[6:-16]=='05' and int(item[18:-4])%2==1:
            return 'male_angry'
        elif item[6:-16]=='06' and int(item[18:-4])%2==0:
            return 'female_fearful'
        elif item[6:-16]=='06' and int(item[18:-4])%2==1:
            return 'male_fearful'
        elif item[6:-16]=='01' and int(item[18:-4])%2==0:
            return 'female_neutral'
        elif item[6:-16]=='01' and int(item[18:-4])%2==1:
            return 'male_neutral'
        elif item[6:-16]=='07' and int(item[18:-4])%2==0:
            return 'female_disgusted'
        elif item[6:-16]=='07' and int(item[18:-4])%2==1:
            return 'male_disgusted'
        elif item[6:-16]=='08' and int(item[18:-4])%2==0:
            return 'female_surprised'
        elif item[6:-16]=='08' and int(item[18:-4])%2==1:
            return 'male_surprised'
        elif item[:1]=='a':
            return 'male_angry'
        elif item[:1]=='f':
            return 'male_fearful'
        elif item[:1]=='h':
            return 'male_happy'
        elif item[:1]=='n':
            return 'male_neutral'
        elif item[:2]=='sa':
            return 'male_sad'
        elif item[:1]=='d':
            return 'male_disgusted'
        elif item[:2]=='su':
            return 'male_surprised'

label =FetchLabel()
df = pd.DataFrame(columns=['feature','emotion'])
bookmark=0
for index,y in enumerate(mylist):
    #print("printing first y")
    #print(y)
    X, sample_rate = librosa.load(y, res_type='kaiser_fast',duration=3,sr=22050*2,offset=0.5)
    sample_rate = np.array(sample_rate)
    mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=13), axis=0)
    feature = mfccs
    #print(y)
    emotion = label.get_emotion(y)
    df.loc[bookmark] = [feature, emotion]
    bookmark=bookmark+1

arr=df['emotion'].tolist()
from collections import Counter
arr=Counter(arr) 
print(arr)

feature_df = pd.DataFrame(df['feature'].values.tolist())
labelled_df = pd.concat([feature_df,df['emotion']], axis=1)
df_cleaned = labelled_df.dropna(0)
shuffled_df = df_cleaned.sample(frac=1).reset_index(drop=True)
shuffled_df = shuffled_df.loc[~shuffled_df['emotion'].isin(['male_neutral', 'male_disgusted', 'male_surprised', 'female_neutral', 'female_disgusted', 'female_surprised'])]
arr=shuffled_df['emotion'].tolist()
from collections import Counter
arr=Counter(arr) 
print(arr)

feature_df = pd.DataFrame(df['feature'].values.tolist())
labelled_df = pd.concat([feature_df,df['emotion']], axis=1)
df_cleaned = labelled_df.dropna(0)
shuffled_df = df_cleaned.sample(frac=1).reset_index(drop=True)
arr=shuffled_df['emotion'].tolist()
from collections import Counter
arr=Counter(arr) 
print(arr)

X_train, X_test, y_train, y_test = train_test_split(shuffled_df.drop('emotion', axis =1), shuffled_df['emotion'], test_size=0.2, random_state=0, shuffle = True)

lb = LabelEncoder()
print(lb)
y_train = np_utils.to_categorical(lb.fit_transform(y_train))
print(y_train)
y_test = np_utils.to_categorical(lb.fit_transform(y_test))
print(y_test)
np.save('label_classes.npy', lb.classes_)
print(X_train.shape[1])

x_train_exp = np.expand_dims(X_train, axis=2)
print(X_train[1])
print("expand")
print(x_train_exp[1])
x_test_exp = np.expand_dims(X_test, axis=1)
print(x_train_exp.shape[1])

model = Sequential()

model.add(Conv1D(259, 5,padding='same',
                 input_shape=(x_train_exp.shape[1],1)))
model.add(Activation('relu'))
model.add(Conv1D(130, 5,padding='same'))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(MaxPooling1D(pool_size=(8)))
model.add(Conv1D(130, 5,padding='same',))
model.add(Activation('relu'))
model.add(Conv1D(130, 5,padding='same',))
model.add(Activation('relu'))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))
opt = tf.keras.optimizers.RMSprop(lr=0.0001, decay=1e-6)

# Set the target class number
target_class = 5
# Model 
model = Sequential()
model.add(Conv1D(256, 8, padding='same',input_shape=(X_train.shape[1],1))) #1
model.add(Activation('relu'))
model.add(Conv1D(256, 8, padding='same')) #2
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))
model.add(MaxPooling1D(pool_size=(8)))
model.add(Conv1D(128, 8, padding='same')) #3
model.add(Activation('relu')) 
model.add(Conv1D(128, 8, padding='same')) #4
model.add(Activation('relu'))
model.add(Conv1D(128, 8, padding='same')) #5
model.add(Activation('relu'))
model.add(Conv1D(128, 8, padding='same')) #6
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.25))
model.add(MaxPooling1D(pool_size=(8)))
model.add(Conv1D(64, 8, padding='same')) #7
model.add(Activation('relu'))
model.add(Conv1D(64, 8, padding='same')) #8
model.add(Activation('relu'))
model.add(Flatten())
model.add(Dense(target_class)) #9
model.add(Activation('softmax'))
opt = tf.keras.optimizers.RMSprop(lr=0.00001, decay=1e-6)

model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
history = model.fit(x_train_exp, y_train, batch_size=512, epochs=600, validation_data = (x_test_exp, y_test))

model.save("/content/drive/My Drive/Audio_Analysis/audio_part1.h5"
opt = tf.keras.optimizers.RMSprop(lr=0.0001, decay=1e-6)